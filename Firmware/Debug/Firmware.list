
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d48  08002d48  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d50  08002d50  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000004  08002d5c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08002d5c  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000060fa  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013ea  00000000  00000000  00026126  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  00027510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  00027c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013243  00000000  00000000  000282a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000064a1  00000000  00000000  0003b4e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000776fa  00000000  00000000  00041984  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b907e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000183c  00000000  00000000  000b90fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a54 	.word	0x08002a54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002a54 	.word	0x08002a54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8cf 	bl	8000420 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ca 	bl	8000420 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzsi2>:
 80003e4:	211c      	movs	r1, #28
 80003e6:	2301      	movs	r3, #1
 80003e8:	041b      	lsls	r3, r3, #16
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d301      	bcc.n	80003f2 <__clzsi2+0xe>
 80003ee:	0c00      	lsrs	r0, r0, #16
 80003f0:	3910      	subs	r1, #16
 80003f2:	0a1b      	lsrs	r3, r3, #8
 80003f4:	4298      	cmp	r0, r3
 80003f6:	d301      	bcc.n	80003fc <__clzsi2+0x18>
 80003f8:	0a00      	lsrs	r0, r0, #8
 80003fa:	3908      	subs	r1, #8
 80003fc:	091b      	lsrs	r3, r3, #4
 80003fe:	4298      	cmp	r0, r3
 8000400:	d301      	bcc.n	8000406 <__clzsi2+0x22>
 8000402:	0900      	lsrs	r0, r0, #4
 8000404:	3904      	subs	r1, #4
 8000406:	a202      	add	r2, pc, #8	; (adr r2, 8000410 <__clzsi2+0x2c>)
 8000408:	5c10      	ldrb	r0, [r2, r0]
 800040a:	1840      	adds	r0, r0, r1
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	02020304 	.word	0x02020304
 8000414:	01010101 	.word	0x01010101
	...

08000420 <__clzdi2>:
 8000420:	b510      	push	{r4, lr}
 8000422:	2900      	cmp	r1, #0
 8000424:	d103      	bne.n	800042e <__clzdi2+0xe>
 8000426:	f7ff ffdd 	bl	80003e4 <__clzsi2>
 800042a:	3020      	adds	r0, #32
 800042c:	e002      	b.n	8000434 <__clzdi2+0x14>
 800042e:	1c08      	adds	r0, r1, #0
 8000430:	f7ff ffd8 	bl	80003e4 <__clzsi2>
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043c:	f000 fc3a 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000440:	f000 f85a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000444:	f000 f8f4 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000448:	f000 f8c2 	bl	80005d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_setRST(GPIOB, LCD_RST_Pin);
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	4a22      	ldr	r2, [pc, #136]	; (80004dc <main+0xa4>)
 8000452:	0019      	movs	r1, r3
 8000454:	0010      	movs	r0, r2
 8000456:	f000 f97f 	bl	8000758 <LCD_setRST>
  LCD_setCE(GPIOB, LCD_CE_Pin);
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <main+0xa4>)
 8000460:	0019      	movs	r1, r3
 8000462:	0010      	movs	r0, r2
 8000464:	f000 f98c 	bl	8000780 <LCD_setCE>
  LCD_setDC(GPIOA, LCD_DC_Pin);
 8000468:	23a0      	movs	r3, #160	; 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	0018      	movs	r0, r3
 8000470:	f000 f99a 	bl	80007a8 <LCD_setDC>
  LCD_setDIN(GPIOA, LCD_DIN_Pin);
 8000474:	23a0      	movs	r3, #160	; 0xa0
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0018      	movs	r0, r3
 800047c:	f000 f9a8 	bl	80007d0 <LCD_setDIN>
  LCD_setCLK(GPIOB, LCD_CLK_Pin);
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <main+0xa4>)
 8000482:	2108      	movs	r1, #8
 8000484:	0018      	movs	r0, r3
 8000486:	f000 f9b7 	bl	80007f8 <LCD_setCLK>
  LCD_init();
 800048a:	f000 fa59 	bl	8000940 <LCD_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_clrScr();
 800048e:	f000 faf9 	bl	8000a84 <LCD_clrScr>
  LCD_print("Line 1", 0, 0);
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <main+0xa8>)
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 facf 	bl	8000a3c <LCD_print>
  LCD_print("Line 2", 0, 1);
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <main+0xac>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	2100      	movs	r1, #0
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fac9 	bl	8000a3c <LCD_print>
  LCD_print("Line 3", 0, 2);
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <main+0xb0>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	2100      	movs	r1, #0
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fac3 	bl	8000a3c <LCD_print>
  LCD_print("Line 4", 0, 3);
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <main+0xb4>)
 80004b8:	2203      	movs	r2, #3
 80004ba:	2100      	movs	r1, #0
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fabd 	bl	8000a3c <LCD_print>
  LCD_print("Line 5", 0, 4);
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <main+0xb8>)
 80004c4:	2204      	movs	r2, #4
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fab7 	bl	8000a3c <LCD_print>
  LCD_print("Line 6", 0, 5);
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <main+0xbc>)
 80004d0:	2205      	movs	r2, #5
 80004d2:	2100      	movs	r1, #0
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fab1 	bl	8000a3c <LCD_print>

  while (1)
 80004da:	e7fe      	b.n	80004da <main+0xa2>
 80004dc:	50000400 	.word	0x50000400
 80004e0:	08002a6c 	.word	0x08002a6c
 80004e4:	08002a74 	.word	0x08002a74
 80004e8:	08002a7c 	.word	0x08002a7c
 80004ec:	08002a84 	.word	0x08002a84
 80004f0:	08002a8c 	.word	0x08002a8c
 80004f4:	08002a94 	.word	0x08002a94

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b09f      	sub	sp, #124	; 0x7c
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2440      	movs	r4, #64	; 0x40
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 fa9b 	bl	8002a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	232c      	movs	r3, #44	; 0x2c
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 fa93 	bl	8002a44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	0018      	movs	r0, r3
 8000522:	2328      	movs	r3, #40	; 0x28
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f002 fa8c 	bl	8002a44 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a26      	ldr	r2, [pc, #152]	; (80005cc <SystemClock_Config+0xd4>)
 8000532:	401a      	ands	r2, r3
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <SystemClock_Config+0xd0>)
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2210      	movs	r2, #16
 8000544:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	22a0      	movs	r2, #160	; 0xa0
 8000556:	0212      	lsls	r2, r2, #8
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	187b      	adds	r3, r7, r1
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fe56 	bl	8001214 <HAL_RCC_OscConfig>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800056c:	f000 f8ee 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	212c      	movs	r1, #44	; 0x2c
 8000572:	187b      	adds	r3, r7, r1
 8000574:	220f      	movs	r2, #15
 8000576:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2100      	movs	r1, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fa0d 	bl	80019b4 <HAL_RCC_ClockConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800059e:	f000 f8d5 	bl	800074c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2202      	movs	r2, #2
 80005a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fbe3 	bl	8001d7c <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ba:	f000 f8c7 	bl	800074c <Error_Handler>
  }
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b01f      	add	sp, #124	; 0x7c
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40007000 	.word	0x40007000
 80005cc:	ffffe7ff 	.word	0xffffe7ff

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	22e1      	movs	r2, #225	; 0xe1
 80005de:	0252      	lsls	r2, r2, #9
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fd25 	bl	8002064 <HAL_UART_Init>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061e:	f000 f895 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000020 	.word	0x20000020
 800062c:	40004400 	.word	0x40004400

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	; 0x2c
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	2414      	movs	r4, #20
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f002 f9ff 	bl	8002a44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b3d      	ldr	r3, [pc, #244]	; (800073c <MX_GPIO_Init+0x10c>)
 8000648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800064a:	4b3c      	ldr	r3, [pc, #240]	; (800073c <MX_GPIO_Init+0x10c>)
 800064c:	2104      	movs	r1, #4
 800064e:	430a      	orrs	r2, r1
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
 8000652:	4b3a      	ldr	r3, [pc, #232]	; (800073c <MX_GPIO_Init+0x10c>)
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	2204      	movs	r2, #4
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	4b37      	ldr	r3, [pc, #220]	; (800073c <MX_GPIO_Init+0x10c>)
 8000660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000662:	4b36      	ldr	r3, [pc, #216]	; (800073c <MX_GPIO_Init+0x10c>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	430a      	orrs	r2, r1
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
 800066a:	4b34      	ldr	r3, [pc, #208]	; (800073c <MX_GPIO_Init+0x10c>)
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <MX_GPIO_Init+0x10c>)
 8000678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <MX_GPIO_Init+0x10c>)
 800067c:	2101      	movs	r1, #1
 800067e:	430a      	orrs	r2, r1
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <MX_GPIO_Init+0x10c>)
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_GPIO_Init+0x10c>)
 8000690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <MX_GPIO_Init+0x10c>)
 8000694:	2102      	movs	r1, #2
 8000696:	430a      	orrs	r2, r1
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0x10c>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	2202      	movs	r2, #2
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BACKLIGHT_Pin|LD2_Pin|LCD_DC_Pin|LCD_DIN_Pin, GPIO_PIN_RESET);
 80006a6:	23a0      	movs	r3, #160	; 0xa0
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2200      	movs	r2, #0
 80006ac:	21e1      	movs	r1, #225	; 0xe1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fd92 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CLK_Pin|LCD_RST_Pin|LCD_CE_Pin, GPIO_PIN_RESET);
 80006b4:	23c2      	movs	r3, #194	; 0xc2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4821      	ldr	r0, [pc, #132]	; (8000740 <MX_GPIO_Init+0x110>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	0019      	movs	r1, r3
 80006be:	f000 fd8b 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	0192      	lsls	r2, r2, #6
 80006c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <MX_GPIO_Init+0x114>)
 80006ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <MX_GPIO_Init+0x118>)
 80006da:	0019      	movs	r1, r3
 80006dc:	0010      	movs	r0, r2
 80006de:	f000 fbfd 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BACKLIGHT_Pin LD2_Pin LCD_DC_Pin LCD_DIN_Pin */
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin|LD2_Pin|LCD_DC_Pin|LCD_DIN_Pin;
 80006e2:	0021      	movs	r1, r4
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	22e1      	movs	r2, #225	; 0xe1
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	000c      	movs	r4, r1
 80006fe:	187a      	adds	r2, r7, r1
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fbe8 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CLK_Pin LCD_RST_Pin LCD_CE_Pin */
  GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_RST_Pin|LCD_CE_Pin;
 800070c:	0021      	movs	r1, r4
 800070e:	187b      	adds	r3, r7, r1
 8000710:	22c2      	movs	r2, #194	; 0xc2
 8000712:	0092      	lsls	r2, r2, #2
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2201      	movs	r2, #1
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	187b      	adds	r3, r7, r1
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <MX_GPIO_Init+0x110>)
 800072c:	0019      	movs	r1, r3
 800072e:	0010      	movs	r0, r2
 8000730:	f000 fbd4 	bl	8000edc <HAL_GPIO_Init>

}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b00b      	add	sp, #44	; 0x2c
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	50000400 	.word	0x50000400
 8000744:	10210000 	.word	0x10210000
 8000748:	50000800 	.word	0x50000800

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	000a      	movs	r2, r1
 8000762:	1cbb      	adds	r3, r7, #2
 8000764:	801a      	strh	r2, [r3, #0]
	lcd_gpio.RSTPORT = PORT;
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <LCD_setRST+0x24>)
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
	lcd_gpio.RSTPIN = PIN;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <LCD_setRST+0x24>)
 800076e:	1cba      	adds	r2, r7, #2
 8000770:	8812      	ldrh	r2, [r2, #0]
 8000772:	809a      	strh	r2, [r3, #4]
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000a0 	.word	0x200000a0

08000780 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	000a      	movs	r2, r1
 800078a:	1cbb      	adds	r3, r7, #2
 800078c:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CEPORT = PORT;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <LCD_setCE+0x24>)
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	609a      	str	r2, [r3, #8]
	lcd_gpio.CEPIN = PIN;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <LCD_setCE+0x24>)
 8000796:	1cba      	adds	r2, r7, #2
 8000798:	8812      	ldrh	r2, [r2, #0]
 800079a:	819a      	strh	r2, [r3, #12]
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b002      	add	sp, #8
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000a0 	.word	0x200000a0

080007a8 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	000a      	movs	r2, r1
 80007b2:	1cbb      	adds	r3, r7, #2
 80007b4:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DCPORT = PORT;
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <LCD_setDC+0x24>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	611a      	str	r2, [r3, #16]
	lcd_gpio.DCPIN = PIN;
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <LCD_setDC+0x24>)
 80007be:	1cba      	adds	r2, r7, #2
 80007c0:	8812      	ldrh	r2, [r2, #0]
 80007c2:	829a      	strh	r2, [r3, #20]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000a0 	.word	0x200000a0

080007d0 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	000a      	movs	r2, r1
 80007da:	1cbb      	adds	r3, r7, #2
 80007dc:	801a      	strh	r2, [r3, #0]
	lcd_gpio.DINPORT = PORT;
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <LCD_setDIN+0x24>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	619a      	str	r2, [r3, #24]
	lcd_gpio.DINPIN = PIN;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <LCD_setDIN+0x24>)
 80007e6:	1cba      	adds	r2, r7, #2
 80007e8:	8812      	ldrh	r2, [r2, #0]
 80007ea:	839a      	strh	r2, [r3, #28]
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000a0 	.word	0x200000a0

080007f8 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	000a      	movs	r2, r1
 8000802:	1cbb      	adds	r3, r7, #2
 8000804:	801a      	strh	r2, [r3, #0]
	lcd_gpio.CLKPORT = PORT;
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <LCD_setCLK+0x24>)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	621a      	str	r2, [r3, #32]
	lcd_gpio.CLKPIN = PIN;
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <LCD_setCLK+0x24>)
 800080e:	1cba      	adds	r2, r7, #2
 8000810:	8812      	ldrh	r2, [r2, #0]
 8000812:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000a0 	.word	0x200000a0

08000820 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	0002      	movs	r2, r0
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	701a      	strb	r2, [r3, #0]
  uint8_t i;

  for(i = 0; i < 8; i++){
 800082c:	230f      	movs	r3, #15
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	e02a      	b.n	800088c <LCD_send+0x6c>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <LCD_send+0x80>)
 8000838:	6998      	ldr	r0, [r3, #24]
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <LCD_send+0x80>)
 800083c:	8b9c      	ldrh	r4, [r3, #28]
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	250f      	movs	r5, #15
 8000844:	197b      	adds	r3, r7, r5
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2107      	movs	r1, #7
 800084a:	1acb      	subs	r3, r1, r3
 800084c:	411a      	asrs	r2, r3
 800084e:	0013      	movs	r3, r2
 8000850:	2201      	movs	r2, #1
 8000852:	4013      	ands	r3, r2
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	4193      	sbcs	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	001a      	movs	r2, r3
 800085c:	0021      	movs	r1, r4
 800085e:	f000 fcbb 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <LCD_send+0x80>)
 8000864:	6a18      	ldr	r0, [r3, #32]
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <LCD_send+0x80>)
 8000868:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800086a:	2201      	movs	r2, #1
 800086c:	0019      	movs	r1, r3
 800086e:	f000 fcb3 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <LCD_send+0x80>)
 8000874:	6a18      	ldr	r0, [r3, #32]
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <LCD_send+0x80>)
 8000878:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800087a:	2200      	movs	r2, #0
 800087c:	0019      	movs	r1, r3
 800087e:	f000 fcab 	bl	80011d8 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	197b      	adds	r3, r7, r5
 8000888:	3201      	adds	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	230f      	movs	r3, #15
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b07      	cmp	r3, #7
 8000894:	d9cf      	bls.n	8000836 <LCD_send+0x16>
  }
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b004      	add	sp, #16
 800089c:	bdb0      	pop	{r4, r5, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	200000a0 	.word	0x200000a0

080008a4 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	1dbb      	adds	r3, r7, #6
 80008b2:	1c0a      	adds	r2, r1, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  if(mode == LCD_COMMAND){
 80008b6:	1dbb      	adds	r3, r7, #6
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d11d      	bne.n	80008fa <LCD_write+0x56>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <LCD_write+0x98>)
 80008c0:	6918      	ldr	r0, [r3, #16]
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <LCD_write+0x98>)
 80008c4:	8a9b      	ldrh	r3, [r3, #20]
 80008c6:	2200      	movs	r2, #0
 80008c8:	0019      	movs	r1, r3
 80008ca:	f000 fc85 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <LCD_write+0x98>)
 80008d0:	6898      	ldr	r0, [r3, #8]
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <LCD_write+0x98>)
 80008d4:	899b      	ldrh	r3, [r3, #12]
 80008d6:	2200      	movs	r2, #0
 80008d8:	0019      	movs	r1, r3
 80008da:	f000 fc7d 	bl	80011d8 <HAL_GPIO_WritePin>
    LCD_send(data);
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff ff9c 	bl	8000820 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <LCD_write+0x98>)
 80008ea:	6898      	ldr	r0, [r3, #8]
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <LCD_write+0x98>)
 80008ee:	899b      	ldrh	r3, [r3, #12]
 80008f0:	2201      	movs	r2, #1
 80008f2:	0019      	movs	r1, r3
 80008f4:	f000 fc70 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 80008f8:	e01c      	b.n	8000934 <LCD_write+0x90>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <LCD_write+0x98>)
 80008fc:	6918      	ldr	r0, [r3, #16]
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <LCD_write+0x98>)
 8000900:	8a9b      	ldrh	r3, [r3, #20]
 8000902:	2201      	movs	r2, #1
 8000904:	0019      	movs	r1, r3
 8000906:	f000 fc67 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <LCD_write+0x98>)
 800090c:	6898      	ldr	r0, [r3, #8]
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <LCD_write+0x98>)
 8000910:	899b      	ldrh	r3, [r3, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	0019      	movs	r1, r3
 8000916:	f000 fc5f 	bl	80011d8 <HAL_GPIO_WritePin>
    LCD_send(data);
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff ff7e 	bl	8000820 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <LCD_write+0x98>)
 8000926:	6898      	ldr	r0, [r3, #8]
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <LCD_write+0x98>)
 800092a:	899b      	ldrh	r3, [r3, #12]
 800092c:	2201      	movs	r2, #1
 800092e:	0019      	movs	r1, r3
 8000930:	f000 fc52 	bl	80011d8 <HAL_GPIO_WritePin>
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000a0 	.word	0x200000a0

08000940 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <LCD_init+0x68>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <LCD_init+0x68>)
 800094a:	889b      	ldrh	r3, [r3, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	0019      	movs	r1, r3
 8000950:	f000 fc42 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <LCD_init+0x68>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <LCD_init+0x68>)
 800095a:	889b      	ldrh	r3, [r3, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	0019      	movs	r1, r3
 8000960:	f000 fc3a 	bl	80011d8 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000964:	2100      	movs	r1, #0
 8000966:	2021      	movs	r0, #33	; 0x21
 8000968:	f7ff ff9c 	bl	80008a4 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 800096c:	2100      	movs	r1, #0
 800096e:	20b8      	movs	r0, #184	; 0xb8
 8000970:	f7ff ff98 	bl	80008a4 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000974:	2100      	movs	r1, #0
 8000976:	2004      	movs	r0, #4
 8000978:	f7ff ff94 	bl	80008a4 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 800097c:	2100      	movs	r1, #0
 800097e:	2014      	movs	r0, #20
 8000980:	f7ff ff90 	bl	80008a4 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000984:	2100      	movs	r1, #0
 8000986:	2020      	movs	r0, #32
 8000988:	f7ff ff8c 	bl	80008a4 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 800098c:	2100      	movs	r1, #0
 800098e:	200c      	movs	r0, #12
 8000990:	f7ff ff88 	bl	80008a4 <LCD_write>
  LCD_clrScr();
 8000994:	f000 f876 	bl	8000a84 <LCD_clrScr>
  lcd.inverttext = false;
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <LCD_init+0x6c>)
 800099a:	23fc      	movs	r3, #252	; 0xfc
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2100      	movs	r1, #0
 80009a0:	54d1      	strb	r1, [r2, r3]
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000a0 	.word	0x200000a0
 80009ac:	200000c8 	.word	0x200000c8

080009b0 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	0002      	movs	r2, r0
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++){
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e030      	b.n	8000a24 <LCD_putChar+0x74>
    if(lcd.inverttext != true)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <LCD_putChar+0x84>)
 80009c4:	23fc      	movs	r3, #252	; 0xfc
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	5cd3      	ldrb	r3, [r2, r3]
 80009ca:	2201      	movs	r2, #1
 80009cc:	4053      	eors	r3, r2
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d011      	beq.n	80009f8 <LCD_putChar+0x48>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3b20      	subs	r3, #32
 80009da:	001a      	movs	r2, r3
 80009dc:	4916      	ldr	r1, [pc, #88]	; (8000a38 <LCD_putChar+0x88>)
 80009de:	0013      	movs	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	189b      	adds	r3, r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	18ca      	adds	r2, r1, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	18d3      	adds	r3, r2, r3
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2101      	movs	r1, #1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ff57 	bl	80008a4 <LCD_write>
 80009f6:	e012      	b.n	8000a1e <LCD_putChar+0x6e>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	3b20      	subs	r3, #32
 80009fe:	001a      	movs	r2, r3
 8000a00:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LCD_putChar+0x88>)
 8000a02:	0013      	movs	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	189b      	adds	r3, r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	18ca      	adds	r2, r1, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	43db      	mvns	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2101      	movs	r1, #1
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ff43 	bl	80008a4 <LCD_write>
  for(int i = 0; i < 6; i++){
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	ddcb      	ble.n	80009c2 <LCD_putChar+0x12>
  }
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b004      	add	sp, #16
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	200000c8 	.word	0x200000c8
 8000a38:	08002a9c 	.word	0x08002a9c

08000a3c <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	0008      	movs	r0, r1
 8000a46:	0011      	movs	r1, r2
 8000a48:	1cfb      	adds	r3, r7, #3
 8000a4a:	1c02      	adds	r2, r0, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	1cbb      	adds	r3, r7, #2
 8000a50:	1c0a      	adds	r2, r1, #0
 8000a52:	701a      	strb	r2, [r3, #0]
  LCD_goXY(x, y);
 8000a54:	1cbb      	adds	r3, r7, #2
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	1cfb      	adds	r3, r7, #3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f82e 	bl	8000ac0 <LCD_goXY>
  while(*str){
 8000a64:	e006      	b.n	8000a74 <LCD_print+0x38>
    LCD_putChar(*str++);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ff9e 	bl	80009b0 <LCD_putChar>
  while(*str){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f4      	bne.n	8000a66 <LCD_print+0x2a>
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	e00b      	b.n	8000aa8 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000a90:	2101      	movs	r1, #1
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff ff06 	bl	80008a4 <LCD_write>
    lcd.buffer[i] = 0;
 8000a98:	4a08      	ldr	r2, [pc, #32]	; (8000abc <LCD_clrScr+0x38>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	18d3      	adds	r3, r2, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	23f8      	movs	r3, #248	; 0xf8
 8000aac:	33ff      	adds	r3, #255	; 0xff
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	ddee      	ble.n	8000a90 <LCD_clrScr+0xc>
  }
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	200000c8 	.word	0x200000c8

08000ac0 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	1c0a      	adds	r2, r1, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	4252      	negs	r2, r2
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fedf 	bl	80008a4 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8000ae6:	1dbb      	adds	r3, r7, #6
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2240      	movs	r2, #64	; 0x40
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2100      	movs	r1, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fed6 	bl	80008a4 <LCD_write>
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_MspInit+0x24>)
 8000b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x24>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_MspInit+0x24>)
 8000b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_MspInit+0x24>)
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	0549      	lsls	r1, r1, #21
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	230c      	movs	r3, #12
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	0018      	movs	r0, r3
 8000b36:	2314      	movs	r3, #20
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f001 ff82 	bl	8002a44 <memset>
  if(huart->Instance==USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x80>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d129      	bne.n	8000b9e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0289      	lsls	r1, r1, #10
 8000b54:	430a      	orrs	r2, r1
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	430a      	orrs	r2, r1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b70:	210c      	movs	r1, #12
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	220c      	movs	r2, #12
 8000b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2203      	movs	r2, #3
 8000b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	187a      	adds	r2, r7, r1
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f000 f99f 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b008      	add	sp, #32
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40004400 	.word	0x40004400
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f8b6 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <SystemInit+0x64>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <SystemInit+0x64>)
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	0049      	lsls	r1, r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <SystemInit+0x64>)
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <SystemInit+0x64>)
 8000bfc:	4913      	ldr	r1, [pc, #76]	; (8000c4c <SystemInit+0x68>)
 8000bfe:	400a      	ands	r2, r1
 8000c00:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <SystemInit+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <SystemInit+0x64>)
 8000c08:	4911      	ldr	r1, [pc, #68]	; (8000c50 <SystemInit+0x6c>)
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <SystemInit+0x64>)
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <SystemInit+0x64>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	438a      	bics	r2, r1
 8000c18:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <SystemInit+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <SystemInit+0x64>)
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <SystemInit+0x70>)
 8000c22:	400a      	ands	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <SystemInit+0x64>)
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <SystemInit+0x64>)
 8000c2c:	490a      	ldr	r1, [pc, #40]	; (8000c58 <SystemInit+0x74>)
 8000c2e:	400a      	ands	r2, r1
 8000c30:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SystemInit+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <SystemInit+0x78>)
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	0512      	lsls	r2, r2, #20
 8000c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	88ff400c 	.word	0x88ff400c
 8000c50:	fef6fff6 	.word	0xfef6fff6
 8000c54:	fffbffff 	.word	0xfffbffff
 8000c58:	ff02ffff 	.word	0xff02ffff
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c66:	e003      	b.n	8000c70 <LoopCopyDataInit>

08000c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c6e:	3104      	adds	r1, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c78:	d3f6      	bcc.n	8000c68 <CopyDataInit>
  ldr  r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000c7c:	e002      	b.n	8000c84 <LoopFillZerobss>

08000c7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c7e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c80:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c82:	3204      	adds	r2, #4

08000c84 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <LoopForever+0x16>)
  cmp  r2, r3
 8000c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c88:	d3f9      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c8a:	f7ff ffab 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f001 feb5 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fbd1 	bl	8000438 <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
   ldr   r0, =_estack
 8000c98:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000c9c:	08002d58 	.word	0x08002d58
  ldr  r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000ca8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000cac:	200002c8 	.word	0x200002c8

08000cb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_COMP_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x3c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Init+0x3c>)
 8000cc6:	2140      	movs	r1, #64	; 0x40
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f811 	bl	8000cf4 <HAL_InitTick>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e001      	b.n	8000ce2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cde:	f7ff ff0f 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_InitTick+0x50>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	23fa      	movs	r3, #250	; 0xfa
 8000d0a:	0099      	lsls	r1, r3, #2
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	f7ff f9fb 	bl	8000108 <__udivsi3>
 8000d12:	0003      	movs	r3, r0
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 f8d4 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d004      	beq.n	8000d28 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000d1e:	230f      	movs	r3, #15
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e006      	b.n	8000d36 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	425b      	negs	r3, r3
 8000d2e:	2200      	movs	r2, #0
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 f8b1 	bl	8000e98 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000d36:	230f      	movs	r3, #15
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	781b      	ldrb	r3, [r3, #0]
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b004      	add	sp, #16
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000000 	.word	0x20000000

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick++;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_IncTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <HAL_IncTick+0x14>)
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200002c4 	.word	0x200002c4

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <HAL_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	200002c4 	.word	0x200002c4

08000d74 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b7f      	cmp	r3, #127	; 0x7f
 8000d88:	d932      	bls.n	8000df0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8a:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <NVIC_SetPriority+0xd4>)
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	0019      	movs	r1, r3
 8000d92:	230f      	movs	r3, #15
 8000d94:	400b      	ands	r3, r1
 8000d96:	3b08      	subs	r3, #8
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	18d3      	adds	r3, r2, r3
 8000da0:	3304      	adds	r3, #4
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	1dfa      	adds	r2, r7, #7
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	0011      	movs	r1, r2
 8000daa:	2203      	movs	r2, #3
 8000dac:	400a      	ands	r2, r1
 8000dae:	00d2      	lsls	r2, r2, #3
 8000db0:	21ff      	movs	r1, #255	; 0xff
 8000db2:	4091      	lsls	r1, r2
 8000db4:	000a      	movs	r2, r1
 8000db6:	43d2      	mvns	r2, r2
 8000db8:	401a      	ands	r2, r3
 8000dba:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	019b      	lsls	r3, r3, #6
 8000dc0:	22ff      	movs	r2, #255	; 0xff
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	0018      	movs	r0, r3
 8000dca:	2303      	movs	r3, #3
 8000dcc:	4003      	ands	r3, r0
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd2:	481d      	ldr	r0, [pc, #116]	; (8000e48 <NVIC_SetPriority+0xd4>)
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	001c      	movs	r4, r3
 8000dda:	230f      	movs	r3, #15
 8000ddc:	4023      	ands	r3, r4
 8000dde:	3b08      	subs	r3, #8
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	430a      	orrs	r2, r1
 8000de4:	3306      	adds	r3, #6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18c3      	adds	r3, r0, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dee:	e027      	b.n	8000e40 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df0:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <NVIC_SetPriority+0xd8>)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	33c0      	adds	r3, #192	; 0xc0
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	589b      	ldr	r3, [r3, r2]
 8000e00:	1dfa      	adds	r2, r7, #7
 8000e02:	7812      	ldrb	r2, [r2, #0]
 8000e04:	0011      	movs	r1, r2
 8000e06:	2203      	movs	r2, #3
 8000e08:	400a      	ands	r2, r1
 8000e0a:	00d2      	lsls	r2, r2, #3
 8000e0c:	21ff      	movs	r1, #255	; 0xff
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	000a      	movs	r2, r1
 8000e12:	43d2      	mvns	r2, r2
 8000e14:	401a      	ands	r2, r3
 8000e16:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	019b      	lsls	r3, r3, #6
 8000e1c:	22ff      	movs	r2, #255	; 0xff
 8000e1e:	401a      	ands	r2, r3
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	0018      	movs	r0, r3
 8000e26:	2303      	movs	r3, #3
 8000e28:	4003      	ands	r3, r0
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <NVIC_SetPriority+0xd8>)
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	33c0      	adds	r3, #192	; 0xc0
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	501a      	str	r2, [r3, r0]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b003      	add	sp, #12
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <SysTick_Config+0x40>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d901      	bls.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e010      	b.n	8000e88 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <SysTick_Config+0x44>)
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	3a01      	subs	r2, #1
 8000e6c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	2103      	movs	r1, #3
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff7d 	bl	8000d74 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SysTick_Config+0x44>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x44>)
 8000e82:	2207      	movs	r2, #7
 8000e84:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	00ffffff 	.word	0x00ffffff
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	1c02      	adds	r2, r0, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <NVIC_SetPriority>
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff ffbf 	bl	8000e50 <SysTick_Config>
 8000ed2:	0003      	movs	r3, r0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ef2:	e155      	b.n	80011a0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d100      	bne.n	8000f0c <HAL_GPIO_Init+0x30>
 8000f0a:	e146      	b.n	800119a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x40>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b12      	cmp	r3, #18
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	58d3      	ldr	r3, [r2, r3]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	4013      	ands	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2107      	movs	r1, #7
 8000f48:	400b      	ands	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	6939      	ldr	r1, [r7, #16]
 8000f62:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d00b      	beq.n	8000f84 <HAL_GPIO_Init+0xa8>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d007      	beq.n	8000f84 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f78:	2b11      	cmp	r3, #17
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b12      	cmp	r3, #18
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	43da      	mvns	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2203      	movs	r2, #3
 8001004:	401a      	ands	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	055b      	lsls	r3, r3, #21
 8001052:	4013      	ands	r3, r2
 8001054:	d100      	bne.n	8001058 <HAL_GPIO_Init+0x17c>
 8001056:	e0a0      	b.n	800119a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001058:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <HAL_GPIO_Init+0x2dc>)
 800105a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105c:	4b56      	ldr	r3, [pc, #344]	; (80011b8 <HAL_GPIO_Init+0x2dc>)
 800105e:	2101      	movs	r1, #1
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001064:	4a55      	ldr	r2, [pc, #340]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	589b      	ldr	r3, [r3, r2]
 8001070:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	409a      	lsls	r2, r3
 800107e:	0013      	movs	r3, r2
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	23a0      	movs	r3, #160	; 0xa0
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	429a      	cmp	r2, r3
 8001090:	d01f      	beq.n	80010d2 <HAL_GPIO_Init+0x1f6>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x2e4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x1f2>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x2e8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2ec>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1ea>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a47      	ldr	r2, [pc, #284]	; (80011cc <HAL_GPIO_Init+0x2f0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1e6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <HAL_GPIO_Init+0x2f4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1e2>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e00a      	b.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010be:	2306      	movs	r3, #6
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010d2:	2300      	movs	r3, #0
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	2103      	movs	r1, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e4:	4935      	ldr	r1, [pc, #212]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	025b      	lsls	r3, r3, #9
 800110a:	4013      	ands	r3, r2
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43da      	mvns	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	029b      	lsls	r3, r3, #10
 8001134:	4013      	ands	r3, r2
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	035b      	lsls	r3, r3, #13
 800115e:	4013      	ands	r3, r2
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43da      	mvns	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	039b      	lsls	r3, r3, #14
 8001188:	4013      	ands	r3, r2
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	40da      	lsrs	r2, r3
 80011a8:	1e13      	subs	r3, r2, #0
 80011aa:	d000      	beq.n	80011ae <HAL_GPIO_Init+0x2d2>
 80011ac:	e6a2      	b.n	8000ef4 <HAL_GPIO_Init+0x18>
  }
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b006      	add	sp, #24
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	50000400 	.word	0x50000400
 80011c4:	50000800 	.word	0x50000800
 80011c8:	50000c00 	.word	0x50000c00
 80011cc:	50001000 	.word	0x50001000
 80011d0:	50001c00 	.word	0x50001c00
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	0008      	movs	r0, r1
 80011e2:	0011      	movs	r1, r2
 80011e4:	1cbb      	adds	r3, r7, #2
 80011e6:	1c02      	adds	r2, r0, #0
 80011e8:	801a      	strh	r2, [r3, #0]
 80011ea:	1c7b      	adds	r3, r7, #1
 80011ec:	1c0a      	adds	r2, r1, #0
 80011ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80011f0:	1c7b      	adds	r3, r7, #1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f8:	1cbb      	adds	r3, r7, #2
 80011fa:	881a      	ldrh	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001200:	e003      	b.n	800120a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001202:	1cbb      	adds	r3, r7, #2
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	f000 fbbc 	bl	80019a0 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001228:	4bc8      	ldr	r3, [pc, #800]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	220c      	movs	r2, #12
 800122e:	4013      	ands	r3, r2
 8001230:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001232:	4bc6      	ldr	r3, [pc, #792]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2201      	movs	r2, #1
 8001244:	4013      	ands	r3, r2
 8001246:	d100      	bne.n	800124a <HAL_RCC_OscConfig+0x36>
 8001248:	e07e      	b.n	8001348 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d007      	beq.n	8001260 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d112      	bne.n	800127c <HAL_RCC_OscConfig+0x68>
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	025b      	lsls	r3, r3, #9
 800125c:	429a      	cmp	r2, r3
 800125e:	d10d      	bne.n	800127c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	4bba      	ldr	r3, [pc, #744]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	029b      	lsls	r3, r3, #10
 8001268:	4013      	ands	r3, r2
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x5a>
 800126c:	e06b      	b.n	8001346 <HAL_RCC_OscConfig+0x132>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d167      	bne.n	8001346 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	f000 fb92 	bl	80019a0 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	025b      	lsls	r3, r3, #9
 8001284:	429a      	cmp	r2, r3
 8001286:	d107      	bne.n	8001298 <HAL_RCC_OscConfig+0x84>
 8001288:	4bb0      	ldr	r3, [pc, #704]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4baf      	ldr	r3, [pc, #700]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	0249      	lsls	r1, r1, #9
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e027      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	02db      	lsls	r3, r3, #11
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d10e      	bne.n	80012c2 <HAL_RCC_OscConfig+0xae>
 80012a4:	4ba9      	ldr	r3, [pc, #676]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4ba8      	ldr	r3, [pc, #672]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	02c9      	lsls	r1, r1, #11
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	4ba6      	ldr	r3, [pc, #664]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4ba5      	ldr	r3, [pc, #660]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0249      	lsls	r1, r1, #9
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e012      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012c2:	4ba2      	ldr	r3, [pc, #648]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4ba1      	ldr	r3, [pc, #644]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012c8:	49a1      	ldr	r1, [pc, #644]	; (8001550 <HAL_RCC_OscConfig+0x33c>)
 80012ca:	400a      	ands	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	4b9f      	ldr	r3, [pc, #636]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	025b      	lsls	r3, r3, #9
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4b9b      	ldr	r3, [pc, #620]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b9a      	ldr	r3, [pc, #616]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012e2:	499c      	ldr	r1, [pc, #624]	; (8001554 <HAL_RCC_OscConfig+0x340>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d015      	beq.n	800131c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fd36 	bl	8000d60 <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012f8:	e009      	b.n	800130e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fa:	f7ff fd31 	bl	8000d60 <HAL_GetTick>
 80012fe:	0002      	movs	r2, r0
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b64      	cmp	r3, #100	; 0x64
 8001306:	d902      	bls.n	800130e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	f000 fb49 	bl	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800130e:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	029b      	lsls	r3, r3, #10
 8001316:	4013      	ands	r3, r2
 8001318:	d0ef      	beq.n	80012fa <HAL_RCC_OscConfig+0xe6>
 800131a:	e015      	b.n	8001348 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fd20 	bl	8000d60 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff fd1b 	bl	8000d60 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e333      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	4013      	ands	r3, r2
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x112>
 8001344:	e000      	b.n	8001348 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2202      	movs	r2, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d100      	bne.n	8001354 <HAL_RCC_OscConfig+0x140>
 8001352:	e098      	b.n	8001486 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	2220      	movs	r2, #32
 800135e:	4013      	ands	r3, r2
 8001360:	d009      	beq.n	8001376 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001362:	4b7a      	ldr	r3, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b79      	ldr	r3, [pc, #484]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001368:	2120      	movs	r1, #32
 800136a:	430a      	orrs	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	2220      	movs	r2, #32
 8001372:	4393      	bics	r3, r2
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b04      	cmp	r3, #4
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	d13d      	bne.n	80013fe <HAL_RCC_OscConfig+0x1ea>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d13a      	bne.n	80013fe <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001388:	4b70      	ldr	r3, [pc, #448]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2204      	movs	r2, #4
 800138e:	4013      	ands	r3, r2
 8001390:	d004      	beq.n	800139c <HAL_RCC_OscConfig+0x188>
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e301      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a6d      	ldr	r2, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x344>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	021a      	lsls	r2, r3, #8
 80013ac:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013b2:	4b66      	ldr	r3, [pc, #408]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2209      	movs	r2, #9
 80013b8:	4393      	bics	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	4b63      	ldr	r3, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80013be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013c4:	f000 fc20 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 80013c8:	0001      	movs	r1, r0
 80013ca:	4b60      	ldr	r3, [pc, #384]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	220f      	movs	r2, #15
 80013d2:	4013      	ands	r3, r2
 80013d4:	4a61      	ldr	r2, [pc, #388]	; (800155c <HAL_RCC_OscConfig+0x348>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	000a      	movs	r2, r1
 80013da:	40da      	lsrs	r2, r3
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x34c>)
 80013de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80013e0:	2513      	movs	r5, #19
 80013e2:	197c      	adds	r4, r7, r5
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fc85 	bl	8000cf4 <HAL_InitTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d047      	beq.n	8001486 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80013f6:	2313      	movs	r3, #19
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	e2d0      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	2b00      	cmp	r3, #0
 8001402:	d027      	beq.n	8001454 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2209      	movs	r2, #9
 800140a:	4393      	bics	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	4b4f      	ldr	r3, [pc, #316]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fca3 	bl	8000d60 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fc9e 	bl	8000d60 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e2b6      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2204      	movs	r2, #4
 8001438:	4013      	ands	r3, r2
 800143a:	d0f1      	beq.n	8001420 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a45      	ldr	r2, [pc, #276]	; (8001558 <HAL_RCC_OscConfig+0x344>)
 8001442:	4013      	ands	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	021a      	lsls	r2, r3, #8
 800144c:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	e018      	b.n	8001486 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001454:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b3c      	ldr	r3, [pc, #240]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fc7e 	bl	8000d60 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fc79 	bl	8000d60 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e291      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2204      	movs	r2, #4
 8001482:	4013      	ands	r3, r2
 8001484:	d1f1      	bne.n	800146a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2210      	movs	r2, #16
 800148c:	4013      	ands	r3, r2
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x27e>
 8001490:	e09f      	b.n	80015d2 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d13f      	bne.n	8001518 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_RCC_OscConfig+0x338>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x29c>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e277      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <HAL_RCC_OscConfig+0x350>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	0019      	movs	r1, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	0a19      	lsrs	r1, r3, #8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	061a      	lsls	r2, r3, #24
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	0b5b      	lsrs	r3, r3, #13
 80014de:	3301      	adds	r3, #1
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	0212      	lsls	r2, r2, #8
 80014e4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	210f      	movs	r1, #15
 80014ee:	400b      	ands	r3, r1
 80014f0:	491a      	ldr	r1, [pc, #104]	; (800155c <HAL_RCC_OscConfig+0x348>)
 80014f2:	5ccb      	ldrb	r3, [r1, r3]
 80014f4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_RCC_OscConfig+0x34c>)
 80014f8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80014fa:	2513      	movs	r5, #19
 80014fc:	197c      	adds	r4, r7, r5
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fbf8 	bl	8000cf4 <HAL_InitTick>
 8001504:	0003      	movs	r3, r0
 8001506:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001508:	197b      	adds	r3, r7, r5
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d060      	beq.n	80015d2 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001510:	2313      	movs	r3, #19
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	e243      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d03e      	beq.n	800159e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_OscConfig+0x338>)
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	0049      	lsls	r1, r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fc17 	bl	8000d60 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001536:	e017      	b.n	8001568 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001538:	f7ff fc12 	bl	8000d60 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d910      	bls.n	8001568 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e22a      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40021000 	.word	0x40021000
 8001550:	fffeffff 	.word	0xfffeffff
 8001554:	fffbffff 	.word	0xfffbffff
 8001558:	ffffe0ff 	.word	0xffffe0ff
 800155c:	08002cdc 	.word	0x08002cdc
 8001560:	20000000 	.word	0x20000000
 8001564:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001568:	4bc6      	ldr	r3, [pc, #792]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d0e1      	beq.n	8001538 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001574:	4bc3      	ldr	r3, [pc, #780]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	4ac3      	ldr	r2, [pc, #780]	; (8001888 <HAL_RCC_OscConfig+0x674>)
 800157a:	4013      	ands	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001582:	4bc0      	ldr	r3, [pc, #768]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001588:	4bbe      	ldr	r3, [pc, #760]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	0a19      	lsrs	r1, r3, #8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	061a      	lsls	r2, r3, #24
 8001596:	4bbb      	ldr	r3, [pc, #748]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001598:	430a      	orrs	r2, r1
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	e019      	b.n	80015d2 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800159e:	4bb9      	ldr	r3, [pc, #740]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4bb8      	ldr	r3, [pc, #736]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80015a4:	49b9      	ldr	r1, [pc, #740]	; (800188c <HAL_RCC_OscConfig+0x678>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fbd9 	bl	8000d60 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b4:	f7ff fbd4 	bl	8000d60 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1ec      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015c6:	4baf      	ldr	r3, [pc, #700]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2208      	movs	r2, #8
 80015d8:	4013      	ands	r3, r2
 80015da:	d036      	beq.n	800164a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d019      	beq.n	8001618 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e4:	4ba7      	ldr	r3, [pc, #668]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80015e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e8:	4ba6      	ldr	r3, [pc, #664]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	430a      	orrs	r2, r1
 80015ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fbb6 	bl	8000d60 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fbb1 	bl	8000d60 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1c9      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800160c:	4b9d      	ldr	r3, [pc, #628]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800160e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d0f1      	beq.n	80015fa <HAL_RCC_OscConfig+0x3e6>
 8001616:	e018      	b.n	800164a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001618:	4b9a      	ldr	r3, [pc, #616]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800161a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800161c:	4b99      	ldr	r3, [pc, #612]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800161e:	2101      	movs	r1, #1
 8001620:	438a      	bics	r2, r1
 8001622:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fb9c 	bl	8000d60 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff fb97 	bl	8000d60 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1af      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001640:	4b90      	ldr	r3, [pc, #576]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d1f1      	bne.n	800162e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2204      	movs	r2, #4
 8001650:	4013      	ands	r3, r2
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x442>
 8001654:	e0af      	b.n	80017b6 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2323      	movs	r3, #35	; 0x23
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b89      	ldr	r3, [pc, #548]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	055b      	lsls	r3, r3, #21
 8001666:	4013      	ands	r3, r2
 8001668:	d10a      	bne.n	8001680 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b86      	ldr	r3, [pc, #536]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800166c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800166e:	4b85      	ldr	r3, [pc, #532]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	0549      	lsls	r1, r1, #21
 8001674:	430a      	orrs	r2, r1
 8001676:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001678:	2323      	movs	r3, #35	; 0x23
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b83      	ldr	r3, [pc, #524]	; (8001890 <HAL_RCC_OscConfig+0x67c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4013      	ands	r3, r2
 800168a:	d11a      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168c:	4b80      	ldr	r3, [pc, #512]	; (8001890 <HAL_RCC_OscConfig+0x67c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <HAL_RCC_OscConfig+0x67c>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0049      	lsls	r1, r1, #1
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff fb61 	bl	8000d60 <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff fb5c 	bl	8000d60 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e174      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b76      	ldr	r3, [pc, #472]	; (8001890 <HAL_RCC_OscConfig+0x67c>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_OscConfig+0x4ca>
 80016ce:	4b6d      	ldr	r3, [pc, #436]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80016d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d2:	4b6c      	ldr	r3, [pc, #432]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0049      	lsls	r1, r1, #1
 80016d8:	430a      	orrs	r2, r1
 80016da:	651a      	str	r2, [r3, #80]	; 0x50
 80016dc:	e031      	b.n	8001742 <HAL_RCC_OscConfig+0x52e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x4ec>
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80016e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ea:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80016ec:	4967      	ldr	r1, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x678>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	651a      	str	r2, [r3, #80]	; 0x50
 80016f2:	4b64      	ldr	r3, [pc, #400]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80016f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80016f8:	4966      	ldr	r1, [pc, #408]	; (8001894 <HAL_RCC_OscConfig+0x680>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	651a      	str	r2, [r3, #80]	; 0x50
 80016fe:	e020      	b.n	8001742 <HAL_RCC_OscConfig+0x52e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	23a0      	movs	r3, #160	; 0xa0
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	429a      	cmp	r2, r3
 800170a:	d10e      	bne.n	800172a <HAL_RCC_OscConfig+0x516>
 800170c:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800170e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001710:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	00c9      	lsls	r1, r1, #3
 8001716:	430a      	orrs	r2, r1
 8001718:	651a      	str	r2, [r3, #80]	; 0x50
 800171a:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800171c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171e:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0049      	lsls	r1, r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	651a      	str	r2, [r3, #80]	; 0x50
 8001728:	e00b      	b.n	8001742 <HAL_RCC_OscConfig+0x52e>
 800172a:	4b56      	ldr	r3, [pc, #344]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800172c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172e:	4b55      	ldr	r3, [pc, #340]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001730:	4956      	ldr	r1, [pc, #344]	; (800188c <HAL_RCC_OscConfig+0x678>)
 8001732:	400a      	ands	r2, r1
 8001734:	651a      	str	r2, [r3, #80]	; 0x50
 8001736:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173a:	4b52      	ldr	r3, [pc, #328]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800173c:	4955      	ldr	r1, [pc, #340]	; (8001894 <HAL_RCC_OscConfig+0x680>)
 800173e:	400a      	ands	r2, r1
 8001740:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d015      	beq.n	8001776 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fb09 	bl	8000d60 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001752:	e009      	b.n	8001768 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fb04 	bl	8000d60 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	4a4e      	ldr	r2, [pc, #312]	; (8001898 <HAL_RCC_OscConfig+0x684>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e11b      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001768:	4b46      	ldr	r3, [pc, #280]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800176a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d0ef      	beq.n	8001754 <HAL_RCC_OscConfig+0x540>
 8001774:	e014      	b.n	80017a0 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff faf3 	bl	8000d60 <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800177e:	e009      	b.n	8001794 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff faee 	bl	8000d60 <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	4a43      	ldr	r2, [pc, #268]	; (8001898 <HAL_RCC_OscConfig+0x684>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e105      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d1ef      	bne.n	8001780 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017a0:	2323      	movs	r3, #35	; 0x23
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d105      	bne.n	80017b6 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80017ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80017b0:	493a      	ldr	r1, [pc, #232]	; (800189c <HAL_RCC_OscConfig+0x688>)
 80017b2:	400a      	ands	r2, r1
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2220      	movs	r2, #32
 80017bc:	4013      	ands	r3, r2
 80017be:	d049      	beq.n	8001854 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d026      	beq.n	8001816 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017c8:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80017d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 80017da:	2101      	movs	r1, #1
 80017dc:	430a      	orrs	r2, r1
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <HAL_RCC_OscConfig+0x68c>)
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_RCC_OscConfig+0x68c>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0189      	lsls	r1, r1, #6
 80017ea:	430a      	orrs	r2, r1
 80017ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fab7 	bl	8000d60 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f8:	f7ff fab2 	bl	8000d60 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e0ca      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d0f1      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5e4>
 8001814:	e01e      	b.n	8001854 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800181c:	2101      	movs	r1, #1
 800181e:	438a      	bics	r2, r1
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_RCC_OscConfig+0x68c>)
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_RCC_OscConfig+0x68c>)
 8001828:	491e      	ldr	r1, [pc, #120]	; (80018a4 <HAL_RCC_OscConfig+0x690>)
 800182a:	400a      	ands	r2, r1
 800182c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fa97 	bl	8000d60 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001838:	f7ff fa92 	bl	8000d60 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0aa      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2202      	movs	r2, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d1f1      	bne.n	8001838 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d100      	bne.n	800185e <HAL_RCC_OscConfig+0x64a>
 800185c:	e09f      	b.n	800199e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x652>
 8001864:	e078      	b.n	8001958 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	2b02      	cmp	r3, #2
 800186c:	d159      	bne.n	8001922 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_RCC_OscConfig+0x670>)
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <HAL_RCC_OscConfig+0x694>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fa71 	bl	8000d60 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001882:	e01c      	b.n	80018be <HAL_RCC_OscConfig+0x6aa>
 8001884:	40021000 	.word	0x40021000
 8001888:	ffff1fff 	.word	0xffff1fff
 800188c:	fffffeff 	.word	0xfffffeff
 8001890:	40007000 	.word	0x40007000
 8001894:	fffffbff 	.word	0xfffffbff
 8001898:	00001388 	.word	0x00001388
 800189c:	efffffff 	.word	0xefffffff
 80018a0:	40010000 	.word	0x40010000
 80018a4:	ffffdfff 	.word	0xffffdfff
 80018a8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff fa58 	bl	8000d60 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e070      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	049b      	lsls	r3, r3, #18
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <HAL_RCC_OscConfig+0x798>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	431a      	orrs	r2, r3
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0449      	lsls	r1, r1, #17
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fa32 	bl	8000d60 <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff fa2d 	bl	8000d60 <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e045      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	049b      	lsls	r3, r3, #18
 800191c:	4013      	ands	r3, r2
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x6ee>
 8001920:	e03d      	b.n	800199e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 8001928:	4921      	ldr	r1, [pc, #132]	; (80019b0 <HAL_RCC_OscConfig+0x79c>)
 800192a:	400a      	ands	r2, r1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fa17 	bl	8000d60 <HAL_GetTick>
 8001932:	0003      	movs	r3, r0
 8001934:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff fa12 	bl	8000d60 <HAL_GetTick>
 800193c:	0002      	movs	r2, r0
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e02a      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	049b      	lsls	r3, r3, #18
 8001952:	4013      	ands	r3, r2
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x724>
 8001956:	e022      	b.n	800199e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e01d      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_RCC_OscConfig+0x794>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	025b      	lsls	r3, r3, #9
 8001970:	401a      	ands	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	429a      	cmp	r2, r3
 8001978:	d10f      	bne.n	800199a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	23f0      	movs	r3, #240	; 0xf0
 800197e:	039b      	lsls	r3, r3, #14
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d107      	bne.n	800199a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	23c0      	movs	r3, #192	; 0xc0
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b00a      	add	sp, #40	; 0x28
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	ff02ffff 	.word	0xff02ffff
 80019b0:	feffffff 	.word	0xfeffffff

080019b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e10d      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_ClockConfig+0x238>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d911      	bls.n	80019fa <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b85      	ldr	r3, [pc, #532]	; (8001bec <HAL_RCC_ClockConfig+0x238>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4393      	bics	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	4b82      	ldr	r3, [pc, #520]	; (8001bec <HAL_RCC_ClockConfig+0x238>)
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e8:	4b80      	ldr	r3, [pc, #512]	; (8001bec <HAL_RCC_ClockConfig+0x238>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0f4      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d009      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b7a      	ldr	r3, [pc, #488]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	22f0      	movs	r2, #240	; 0xf0
 8001a0a:	4393      	bics	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4b77      	ldr	r3, [pc, #476]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d100      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x70>
 8001a22:	e089      	b.n	8001b38 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a2c:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	029b      	lsls	r3, r3, #10
 8001a34:	4013      	ands	r3, r2
 8001a36:	d120      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0d3      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a44:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	049b      	lsls	r3, r3, #18
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d114      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0c7      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a5c:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2204      	movs	r2, #4
 8001a62:	4013      	ands	r3, r2
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0bc      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0b4      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	4393      	bics	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8e:	f7ff f967 	bl	8000d60 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d111      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f95e 	bl	8000d60 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_ClockConfig+0x240>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e097      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	220c      	movs	r2, #12
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d1ef      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xec>
 8001ac0:	e03a      	b.n	8001b38 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d111      	bne.n	8001aee <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aca:	e009      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f948 	bl	8000d60 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	4a47      	ldr	r2, [pc, #284]	; (8001bf4 <HAL_RCC_ClockConfig+0x240>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e081      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	d1ef      	bne.n	8001acc <HAL_RCC_ClockConfig+0x118>
 8001aec:	e024      	b.n	8001b38 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d11b      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	e009      	b.n	8001b0c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff f932 	bl	8000d60 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	4a3c      	ldr	r2, [pc, #240]	; (8001bf4 <HAL_RCC_ClockConfig+0x240>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e06b      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	220c      	movs	r2, #12
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d1ef      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x144>
 8001b18:	e00e      	b.n	8001b38 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff f921 	bl	8000d60 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <HAL_RCC_ClockConfig+0x240>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e05a      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	220c      	movs	r2, #12
 8001b34:	4013      	ands	r3, r2
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_RCC_ClockConfig+0x238>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d211      	bcs.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_RCC_ClockConfig+0x238>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCC_ClockConfig+0x238>)
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_ClockConfig+0x238>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e03c      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4013      	ands	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001b84:	430a      	orrs	r2, r1
 8001b86:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d00a      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_RCC_ClockConfig+0x248>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	00da      	lsls	r2, r3, #3
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba8:	f000 f82e 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bac:	0001      	movs	r1, r0
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_ClockConfig+0x23c>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_RCC_ClockConfig+0x24c>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	000a      	movs	r2, r1
 8001bbe:	40da      	lsrs	r2, r3
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_ClockConfig+0x250>)
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001bc4:	250b      	movs	r5, #11
 8001bc6:	197c      	adds	r4, r7, r5
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff f893 	bl	8000cf4 <HAL_InitTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bd2:	197b      	adds	r3, r7, r5
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001bda:	230b      	movs	r3, #11
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b004      	add	sp, #16
 8001bea:	bdb0      	pop	{r4, r5, r7, pc}
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	00001388 	.word	0x00001388
 8001bf8:	fffff8ff 	.word	0xfffff8ff
 8001bfc:	ffffc7ff 	.word	0xffffc7ff
 8001c00:	08002cdc 	.word	0x08002cdc
 8001c04:	20000000 	.word	0x20000000

08001c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	220c      	movs	r2, #12
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d00e      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d00f      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d157      	bne.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c26:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d002      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c32:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c34:	e05d      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c38:	613b      	str	r3, [r7, #16]
      break;
 8001c3a:	e05a      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c3e:	613b      	str	r3, [r7, #16]
      break;
 8001c40:	e057      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	0c9b      	lsrs	r3, r3, #18
 8001c46:	220f      	movs	r2, #15
 8001c48:	4013      	ands	r3, r2
 8001c4a:	4a30      	ldr	r2, [pc, #192]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c4c:	5cd3      	ldrb	r3, [r2, r3]
 8001c4e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	0d9b      	lsrs	r3, r3, #22
 8001c54:	2203      	movs	r2, #3
 8001c56:	4013      	ands	r3, r2
 8001c58:	3301      	adds	r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5c:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	4013      	ands	r3, r2
 8001c66:	d00f      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	000a      	movs	r2, r1
 8001c6c:	0152      	lsls	r2, r2, #5
 8001c6e:	1a52      	subs	r2, r2, r1
 8001c70:	0193      	lsls	r3, r2, #6
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	185b      	adds	r3, r3, r1
 8001c78:	025b      	lsls	r3, r3, #9
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7fe fa43 	bl	8000108 <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e023      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d00f      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	000a      	movs	r2, r1
 8001c96:	0152      	lsls	r2, r2, #5
 8001c98:	1a52      	subs	r2, r2, r1
 8001c9a:	0193      	lsls	r3, r2, #6
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	185b      	adds	r3, r3, r1
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7fe fa2e 	bl	8000108 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e00e      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	0152      	lsls	r2, r2, #5
 8001cb8:	1a52      	subs	r2, r2, r1
 8001cba:	0193      	lsls	r3, r2, #6
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	185b      	adds	r3, r3, r1
 8001cc2:	029b      	lsls	r3, r3, #10
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7fe fa1e 	bl	8000108 <__udivsi3>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	613b      	str	r3, [r7, #16]
      break;
 8001cd4:	e00d      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	2207      	movs	r2, #7
 8001cde:	4013      	ands	r3, r2
 8001ce0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	0212      	lsls	r2, r2, #8
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      break;
 8001cf0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cf2:	693b      	ldr	r3, [r7, #16]
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b006      	add	sp, #24
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	003d0900 	.word	0x003d0900
 8001d04:	00f42400 	.word	0x00f42400
 8001d08:	007a1200 	.word	0x007a1200
 8001d0c:	08002cf4 	.word	0x08002cf4

08001d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	20000000 	.word	0x20000000

08001d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d28:	f7ff fff2 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d2c:	0001      	movs	r1, r0
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	2207      	movs	r2, #7
 8001d36:	4013      	ands	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	40d9      	lsrs	r1, r3
 8001d3e:	000b      	movs	r3, r1
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08002cec 	.word	0x08002cec

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffdc 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d58:	0001      	movs	r1, r0
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	0adb      	lsrs	r3, r3, #11
 8001d60:	2207      	movs	r2, #7
 8001d62:	4013      	ands	r3, r2
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	40d9      	lsrs	r1, r3
 8001d6a:	000b      	movs	r3, r1
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08002cec 	.word	0x08002cec

08001d7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	4013      	ands	r3, r2
 8001d98:	d100      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001d9a:	e0dd      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001d9c:	2317      	movs	r3, #23
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da4:	4ba4      	ldr	r3, [pc, #656]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	055b      	lsls	r3, r3, #21
 8001dac:	4013      	ands	r3, r2
 8001dae:	d10a      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4ba1      	ldr	r3, [pc, #644]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db4:	4ba0      	ldr	r3, [pc, #640]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0549      	lsls	r1, r1, #21
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001dbe:	2317      	movs	r3, #23
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b9d      	ldr	r3, [pc, #628]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d11a      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b9a      	ldr	r3, [pc, #616]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b99      	ldr	r3, [pc, #612]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	0049      	lsls	r1, r1, #1
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de0:	f7fe ffbe 	bl	8000d60 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7fe ffb9 	bl	8000d60 <HAL_GetTick>
 8001dee:	0002      	movs	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b64      	cmp	r3, #100	; 0x64
 8001df6:	d901      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e118      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b8f      	ldr	r3, [pc, #572]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e08:	4b8b      	ldr	r3, [pc, #556]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
 8001e0e:	039b      	lsls	r3, r3, #14
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	23c0      	movs	r3, #192	; 0xc0
 8001e1a:	039b      	lsls	r3, r3, #14
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	23c0      	movs	r3, #192	; 0xc0
 8001e2a:	039b      	lsls	r3, r3, #14
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d013      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	23c0      	movs	r3, #192	; 0xc0
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	23c0      	movs	r3, #192	; 0xc0
 8001e40:	029b      	lsls	r3, r3, #10
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d10a      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	029b      	lsls	r3, r3, #10
 8001e4e:	401a      	ands	r2, r3
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d101      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0e8      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e5c:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	029b      	lsls	r3, r3, #10
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d049      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	23c0      	movs	r3, #192	; 0xc0
 8001e74:	029b      	lsls	r3, r3, #10
 8001e76:	4013      	ands	r3, r2
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d004      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2220      	movs	r2, #32
 8001e84:	4013      	ands	r3, r2
 8001e86:	d10d      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	23c0      	movs	r3, #192	; 0xc0
 8001e8e:	029b      	lsls	r3, r3, #10
 8001e90:	4013      	ands	r3, r2
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d034      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d02e      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ea4:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea8:	4a65      	ldr	r2, [pc, #404]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eae:	4b62      	ldr	r3, [pc, #392]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb2:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	0309      	lsls	r1, r1, #12
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ebc:	4b5e      	ldr	r3, [pc, #376]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec0:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ec2:	4960      	ldr	r1, [pc, #384]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ec8:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d014      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ff42 	bl	8000d60 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe ff3d 	bl	8000d60 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a56      	ldr	r2, [pc, #344]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e09b      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ef6:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4013      	ands	r3, r2
 8001f00:	d0ef      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	23c0      	movs	r3, #192	; 0xc0
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	23c0      	movs	r3, #192	; 0xc0
 8001f0e:	029b      	lsls	r3, r3, #10
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d10c      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a4c      	ldr	r2, [pc, #304]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	23c0      	movs	r3, #192	; 0xc0
 8001f24:	039b      	lsls	r3, r3, #14
 8001f26:	401a      	ands	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	4b42      	ldr	r3, [pc, #264]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	23c0      	movs	r3, #192	; 0xc0
 8001f38:	029b      	lsls	r3, r3, #10
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f42:	2317      	movs	r3, #23
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f52:	493f      	ldr	r1, [pc, #252]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f62:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	2203      	movs	r2, #3
 8001f68:	4393      	bics	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	220c      	movs	r2, #12
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a2c      	ldr	r2, [pc, #176]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	4a25      	ldr	r2, [pc, #148]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	4a17      	ldr	r2, [pc, #92]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2240      	movs	r2, #64	; 0x40
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d009      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a17      	ldr	r2, [pc, #92]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800200a:	430a      	orrs	r2, r1
 800200c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	4013      	ands	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002028:	430a      	orrs	r2, r1
 800202a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b006      	add	sp, #24
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	fffcffff 	.word	0xfffcffff
 8002044:	fff7ffff 	.word	0xfff7ffff
 8002048:	00001388 	.word	0x00001388
 800204c:	ffcfffff 	.word	0xffcfffff
 8002050:	efffffff 	.word	0xefffffff
 8002054:	fffff3ff 	.word	0xfffff3ff
 8002058:	ffffcfff 	.word	0xffffcfff
 800205c:	fbffffff 	.word	0xfbffffff
 8002060:	fff3ffff 	.word	0xfff3ffff

08002064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e044      	b.n	8002100 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2270      	movs	r2, #112	; 0x70
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f7fe fd4d 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2224      	movs	r2, #36	; 0x24
 8002092:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	438a      	bics	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 f830 	bl	800210c <UART_SetConfig>
 80020ac:	0003      	movs	r3, r0
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e024      	b.n	8002100 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 fb57 	bl	8002774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	490d      	ldr	r1, [pc, #52]	; (8002108 <HAL_UART_Init+0xa4>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	212a      	movs	r1, #42	; 0x2a
 80020e2:	438a      	bics	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fbef 	bl	80028dc <UART_CheckIdleState>
 80020fe:	0003      	movs	r3, r0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	ffffb7ff 	.word	0xffffb7ff

0800210c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800210c:	b5b0      	push	{r4, r5, r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002114:	231b      	movs	r3, #27
 8002116:	2218      	movs	r2, #24
 8002118:	4694      	mov	ip, r2
 800211a:	44bc      	add	ip, r7
 800211c:	4463      	add	r3, ip
 800211e:	2210      	movs	r2, #16
 8002120:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002122:	2300      	movs	r3, #0
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002126:	2313      	movs	r3, #19
 8002128:	2218      	movs	r2, #24
 800212a:	4694      	mov	ip, r2
 800212c:	44bc      	add	ip, r7
 800212e:	4463      	add	r3, ip
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	431a      	orrs	r2, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	4313      	orrs	r3, r2
 800214e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4aca      	ldr	r2, [pc, #808]	; (8002480 <UART_SetConfig+0x374>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4ac5      	ldr	r2, [pc, #788]	; (8002484 <UART_SetConfig+0x378>)
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4abf      	ldr	r2, [pc, #764]	; (8002488 <UART_SetConfig+0x37c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d004      	beq.n	8002198 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002194:	4313      	orrs	r3, r2
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4abb      	ldr	r2, [pc, #748]	; (800248c <UART_SetConfig+0x380>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4ab7      	ldr	r2, [pc, #732]	; (8002490 <UART_SetConfig+0x384>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d134      	bne.n	8002222 <UART_SetConfig+0x116>
 80021b8:	4bb6      	ldr	r3, [pc, #728]	; (8002494 <UART_SetConfig+0x388>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	2203      	movs	r2, #3
 80021be:	4013      	ands	r3, r2
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d015      	beq.n	80021f0 <UART_SetConfig+0xe4>
 80021c4:	d304      	bcc.n	80021d0 <UART_SetConfig+0xc4>
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d00a      	beq.n	80021e0 <UART_SetConfig+0xd4>
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d018      	beq.n	8002200 <UART_SetConfig+0xf4>
 80021ce:	e01f      	b.n	8002210 <UART_SetConfig+0x104>
 80021d0:	231b      	movs	r3, #27
 80021d2:	2218      	movs	r2, #24
 80021d4:	4694      	mov	ip, r2
 80021d6:	44bc      	add	ip, r7
 80021d8:	4463      	add	r3, ip
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e0c5      	b.n	800236c <UART_SetConfig+0x260>
 80021e0:	231b      	movs	r3, #27
 80021e2:	2218      	movs	r2, #24
 80021e4:	4694      	mov	ip, r2
 80021e6:	44bc      	add	ip, r7
 80021e8:	4463      	add	r3, ip
 80021ea:	2202      	movs	r2, #2
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e0bd      	b.n	800236c <UART_SetConfig+0x260>
 80021f0:	231b      	movs	r3, #27
 80021f2:	2218      	movs	r2, #24
 80021f4:	4694      	mov	ip, r2
 80021f6:	44bc      	add	ip, r7
 80021f8:	4463      	add	r3, ip
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e0b5      	b.n	800236c <UART_SetConfig+0x260>
 8002200:	231b      	movs	r3, #27
 8002202:	2218      	movs	r2, #24
 8002204:	4694      	mov	ip, r2
 8002206:	44bc      	add	ip, r7
 8002208:	4463      	add	r3, ip
 800220a:	2208      	movs	r2, #8
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e0ad      	b.n	800236c <UART_SetConfig+0x260>
 8002210:	231b      	movs	r3, #27
 8002212:	2218      	movs	r2, #24
 8002214:	4694      	mov	ip, r2
 8002216:	44bc      	add	ip, r7
 8002218:	4463      	add	r3, ip
 800221a:	2210      	movs	r2, #16
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	e0a4      	b.n	800236c <UART_SetConfig+0x260>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a9c      	ldr	r2, [pc, #624]	; (8002498 <UART_SetConfig+0x38c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d137      	bne.n	800229c <UART_SetConfig+0x190>
 800222c:	4b99      	ldr	r3, [pc, #612]	; (8002494 <UART_SetConfig+0x388>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	220c      	movs	r2, #12
 8002232:	4013      	ands	r3, r2
 8002234:	2b04      	cmp	r3, #4
 8002236:	d018      	beq.n	800226a <UART_SetConfig+0x15e>
 8002238:	d802      	bhi.n	8002240 <UART_SetConfig+0x134>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <UART_SetConfig+0x13e>
 800223e:	e024      	b.n	800228a <UART_SetConfig+0x17e>
 8002240:	2b08      	cmp	r3, #8
 8002242:	d00a      	beq.n	800225a <UART_SetConfig+0x14e>
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d018      	beq.n	800227a <UART_SetConfig+0x16e>
 8002248:	e01f      	b.n	800228a <UART_SetConfig+0x17e>
 800224a:	231b      	movs	r3, #27
 800224c:	2218      	movs	r2, #24
 800224e:	4694      	mov	ip, r2
 8002250:	44bc      	add	ip, r7
 8002252:	4463      	add	r3, ip
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e088      	b.n	800236c <UART_SetConfig+0x260>
 800225a:	231b      	movs	r3, #27
 800225c:	2218      	movs	r2, #24
 800225e:	4694      	mov	ip, r2
 8002260:	44bc      	add	ip, r7
 8002262:	4463      	add	r3, ip
 8002264:	2202      	movs	r2, #2
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e080      	b.n	800236c <UART_SetConfig+0x260>
 800226a:	231b      	movs	r3, #27
 800226c:	2218      	movs	r2, #24
 800226e:	4694      	mov	ip, r2
 8002270:	44bc      	add	ip, r7
 8002272:	4463      	add	r3, ip
 8002274:	2204      	movs	r2, #4
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e078      	b.n	800236c <UART_SetConfig+0x260>
 800227a:	231b      	movs	r3, #27
 800227c:	2218      	movs	r2, #24
 800227e:	4694      	mov	ip, r2
 8002280:	44bc      	add	ip, r7
 8002282:	4463      	add	r3, ip
 8002284:	2208      	movs	r2, #8
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e070      	b.n	800236c <UART_SetConfig+0x260>
 800228a:	231b      	movs	r3, #27
 800228c:	2218      	movs	r2, #24
 800228e:	4694      	mov	ip, r2
 8002290:	44bc      	add	ip, r7
 8002292:	4463      	add	r3, ip
 8002294:	2210      	movs	r2, #16
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	e067      	b.n	800236c <UART_SetConfig+0x260>
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a7e      	ldr	r2, [pc, #504]	; (800249c <UART_SetConfig+0x390>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d107      	bne.n	80022b6 <UART_SetConfig+0x1aa>
 80022a6:	231b      	movs	r3, #27
 80022a8:	2218      	movs	r2, #24
 80022aa:	4694      	mov	ip, r2
 80022ac:	44bc      	add	ip, r7
 80022ae:	4463      	add	r3, ip
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e05a      	b.n	800236c <UART_SetConfig+0x260>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a79      	ldr	r2, [pc, #484]	; (80024a0 <UART_SetConfig+0x394>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d107      	bne.n	80022d0 <UART_SetConfig+0x1c4>
 80022c0:	231b      	movs	r3, #27
 80022c2:	2218      	movs	r2, #24
 80022c4:	4694      	mov	ip, r2
 80022c6:	44bc      	add	ip, r7
 80022c8:	4463      	add	r3, ip
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e04d      	b.n	800236c <UART_SetConfig+0x260>
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6c      	ldr	r2, [pc, #432]	; (8002488 <UART_SetConfig+0x37c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d141      	bne.n	800235e <UART_SetConfig+0x252>
 80022da:	4b6e      	ldr	r3, [pc, #440]	; (8002494 <UART_SetConfig+0x388>)
 80022dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022de:	23c0      	movs	r3, #192	; 0xc0
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	4013      	ands	r3, r2
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	00d2      	lsls	r2, r2, #3
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d01f      	beq.n	800232c <UART_SetConfig+0x220>
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	00d2      	lsls	r2, r2, #3
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d802      	bhi.n	80022fa <UART_SetConfig+0x1ee>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <UART_SetConfig+0x200>
 80022f8:	e028      	b.n	800234c <UART_SetConfig+0x240>
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00c      	beq.n	800231c <UART_SetConfig+0x210>
 8002302:	22c0      	movs	r2, #192	; 0xc0
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	4293      	cmp	r3, r2
 8002308:	d018      	beq.n	800233c <UART_SetConfig+0x230>
 800230a:	e01f      	b.n	800234c <UART_SetConfig+0x240>
 800230c:	231b      	movs	r3, #27
 800230e:	2218      	movs	r2, #24
 8002310:	4694      	mov	ip, r2
 8002312:	44bc      	add	ip, r7
 8002314:	4463      	add	r3, ip
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e027      	b.n	800236c <UART_SetConfig+0x260>
 800231c:	231b      	movs	r3, #27
 800231e:	2218      	movs	r2, #24
 8002320:	4694      	mov	ip, r2
 8002322:	44bc      	add	ip, r7
 8002324:	4463      	add	r3, ip
 8002326:	2202      	movs	r2, #2
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e01f      	b.n	800236c <UART_SetConfig+0x260>
 800232c:	231b      	movs	r3, #27
 800232e:	2218      	movs	r2, #24
 8002330:	4694      	mov	ip, r2
 8002332:	44bc      	add	ip, r7
 8002334:	4463      	add	r3, ip
 8002336:	2204      	movs	r2, #4
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e017      	b.n	800236c <UART_SetConfig+0x260>
 800233c:	231b      	movs	r3, #27
 800233e:	2218      	movs	r2, #24
 8002340:	4694      	mov	ip, r2
 8002342:	44bc      	add	ip, r7
 8002344:	4463      	add	r3, ip
 8002346:	2208      	movs	r2, #8
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e00f      	b.n	800236c <UART_SetConfig+0x260>
 800234c:	231b      	movs	r3, #27
 800234e:	2218      	movs	r2, #24
 8002350:	4694      	mov	ip, r2
 8002352:	44bc      	add	ip, r7
 8002354:	4463      	add	r3, ip
 8002356:	2210      	movs	r2, #16
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	e006      	b.n	800236c <UART_SetConfig+0x260>
 800235e:	231b      	movs	r3, #27
 8002360:	2218      	movs	r2, #24
 8002362:	4694      	mov	ip, r2
 8002364:	44bc      	add	ip, r7
 8002366:	4463      	add	r3, ip
 8002368:	2210      	movs	r2, #16
 800236a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a45      	ldr	r2, [pc, #276]	; (8002488 <UART_SetConfig+0x37c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d000      	beq.n	8002378 <UART_SetConfig+0x26c>
 8002376:	e09d      	b.n	80024b4 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002378:	231b      	movs	r3, #27
 800237a:	2218      	movs	r2, #24
 800237c:	4694      	mov	ip, r2
 800237e:	44bc      	add	ip, r7
 8002380:	4463      	add	r3, ip
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d00d      	beq.n	80023a4 <UART_SetConfig+0x298>
 8002388:	dc02      	bgt.n	8002390 <UART_SetConfig+0x284>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <UART_SetConfig+0x28e>
 800238e:	e01d      	b.n	80023cc <UART_SetConfig+0x2c0>
 8002390:	2b04      	cmp	r3, #4
 8002392:	d012      	beq.n	80023ba <UART_SetConfig+0x2ae>
 8002394:	2b08      	cmp	r3, #8
 8002396:	d015      	beq.n	80023c4 <UART_SetConfig+0x2b8>
 8002398:	e018      	b.n	80023cc <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800239a:	f7ff fcc3 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 800239e:	0003      	movs	r3, r0
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80023a2:	e01b      	b.n	80023dc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023a4:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <UART_SetConfig+0x388>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2210      	movs	r2, #16
 80023aa:	4013      	ands	r3, r2
 80023ac:	d002      	beq.n	80023b4 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <UART_SetConfig+0x398>)
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80023b2:	e013      	b.n	80023dc <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80023b4:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <UART_SetConfig+0x39c>)
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80023b8:	e010      	b.n	80023dc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80023ba:	f7ff fc25 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 80023be:	0003      	movs	r3, r0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80023c2:	e00b      	b.n	80023dc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80023ca:	e007      	b.n	80023dc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80023cc:	2313      	movs	r3, #19
 80023ce:	2218      	movs	r2, #24
 80023d0:	4694      	mov	ip, r2
 80023d2:	44bc      	add	ip, r7
 80023d4:	4463      	add	r3, ip
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
        break;
 80023da:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d100      	bne.n	80023e4 <UART_SetConfig+0x2d8>
 80023e2:	e1a6      	b.n	8002732 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	0013      	movs	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	189b      	adds	r3, r3, r2
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d305      	bcc.n	8002400 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d907      	bls.n	8002410 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8002400:	2313      	movs	r3, #19
 8002402:	2218      	movs	r2, #24
 8002404:	4694      	mov	ip, r2
 8002406:	44bc      	add	ip, r7
 8002408:	4463      	add	r3, ip
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e190      	b.n	8002732 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	6939      	ldr	r1, [r7, #16]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	000b      	movs	r3, r1
 800241e:	0e1b      	lsrs	r3, r3, #24
 8002420:	0010      	movs	r0, r2
 8002422:	0205      	lsls	r5, r0, #8
 8002424:	431d      	orrs	r5, r3
 8002426:	000b      	movs	r3, r1
 8002428:	021c      	lsls	r4, r3, #8
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68b8      	ldr	r0, [r7, #8]
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	1900      	adds	r0, r0, r4
 800243c:	4169      	adcs	r1, r5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f7fd fee8 	bl	8000220 <__aeabi_uldivmod>
 8002450:	0003      	movs	r3, r0
 8002452:	000c      	movs	r4, r1
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <UART_SetConfig+0x3a0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d908      	bls.n	8002470 <UART_SetConfig+0x364>
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <UART_SetConfig+0x3a4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d804      	bhi.n	8002470 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	e160      	b.n	8002732 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8002470:	2313      	movs	r3, #19
 8002472:	2218      	movs	r2, #24
 8002474:	4694      	mov	ip, r2
 8002476:	44bc      	add	ip, r7
 8002478:	4463      	add	r3, ip
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e158      	b.n	8002732 <UART_SetConfig+0x626>
 8002480:	efff69f3 	.word	0xefff69f3
 8002484:	ffffcfff 	.word	0xffffcfff
 8002488:	40004800 	.word	0x40004800
 800248c:	fffff4ff 	.word	0xfffff4ff
 8002490:	40013800 	.word	0x40013800
 8002494:	40021000 	.word	0x40021000
 8002498:	40004400 	.word	0x40004400
 800249c:	40004c00 	.word	0x40004c00
 80024a0:	40005000 	.word	0x40005000
 80024a4:	003d0900 	.word	0x003d0900
 80024a8:	00f42400 	.word	0x00f42400
 80024ac:	000002ff 	.word	0x000002ff
 80024b0:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	429a      	cmp	r2, r3
 80024be:	d000      	beq.n	80024c2 <UART_SetConfig+0x3b6>
 80024c0:	e0a9      	b.n	8002616 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 80024c2:	231b      	movs	r3, #27
 80024c4:	2218      	movs	r2, #24
 80024c6:	4694      	mov	ip, r2
 80024c8:	44bc      	add	ip, r7
 80024ca:	4463      	add	r3, ip
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d86d      	bhi.n	80025ae <UART_SetConfig+0x4a2>
 80024d2:	009a      	lsls	r2, r3, #2
 80024d4:	4b9f      	ldr	r3, [pc, #636]	; (8002754 <UART_SetConfig+0x648>)
 80024d6:	18d3      	adds	r3, r2, r3
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024dc:	f7ff fc22 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 80024e0:	0003      	movs	r3, r0
 80024e2:	005a      	lsls	r2, r3, #1
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	18d2      	adds	r2, r2, r3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0019      	movs	r1, r3
 80024f2:	0010      	movs	r0, r2
 80024f4:	f7fd fe08 	bl	8000108 <__udivsi3>
 80024f8:	0003      	movs	r3, r0
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024fe:	e05e      	b.n	80025be <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002500:	f7ff fc26 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002504:	0003      	movs	r3, r0
 8002506:	005a      	lsls	r2, r3, #1
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	18d2      	adds	r2, r2, r3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0019      	movs	r1, r3
 8002516:	0010      	movs	r0, r2
 8002518:	f7fd fdf6 	bl	8000108 <__udivsi3>
 800251c:	0003      	movs	r3, r0
 800251e:	b29b      	uxth	r3, r3
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002522:	e04c      	b.n	80025be <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <UART_SetConfig+0x64c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	4013      	ands	r3, r2
 800252c:	d00e      	beq.n	800254c <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	4a89      	ldr	r2, [pc, #548]	; (800275c <UART_SetConfig+0x650>)
 8002536:	189a      	adds	r2, r3, r2
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	0019      	movs	r1, r3
 800253e:	0010      	movs	r0, r2
 8002540:	f7fd fde2 	bl	8000108 <__udivsi3>
 8002544:	0003      	movs	r3, r0
 8002546:	b29b      	uxth	r3, r3
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800254a:	e038      	b.n	80025be <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	4a83      	ldr	r2, [pc, #524]	; (8002760 <UART_SetConfig+0x654>)
 8002554:	189a      	adds	r2, r3, r2
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0019      	movs	r1, r3
 800255c:	0010      	movs	r0, r2
 800255e:	f7fd fdd3 	bl	8000108 <__udivsi3>
 8002562:	0003      	movs	r3, r0
 8002564:	b29b      	uxth	r3, r3
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002568:	e029      	b.n	80025be <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800256a:	f7ff fb4d 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 800256e:	0003      	movs	r3, r0
 8002570:	005a      	lsls	r2, r3, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	18d2      	adds	r2, r2, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0019      	movs	r1, r3
 8002580:	0010      	movs	r0, r2
 8002582:	f7fd fdc1 	bl	8000108 <__udivsi3>
 8002586:	0003      	movs	r3, r0
 8002588:	b29b      	uxth	r3, r3
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800258c:	e017      	b.n	80025be <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	0252      	lsls	r2, r2, #9
 8002598:	189a      	adds	r2, r3, r2
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0019      	movs	r1, r3
 80025a0:	0010      	movs	r0, r2
 80025a2:	f7fd fdb1 	bl	8000108 <__udivsi3>
 80025a6:	0003      	movs	r3, r0
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025ac:	e007      	b.n	80025be <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80025ae:	2313      	movs	r3, #19
 80025b0:	2218      	movs	r2, #24
 80025b2:	4694      	mov	ip, r2
 80025b4:	44bc      	add	ip, r7
 80025b6:	4463      	add	r3, ip
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
        break;
 80025bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d920      	bls.n	8002606 <UART_SetConfig+0x4fa>
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	4a67      	ldr	r2, [pc, #412]	; (8002764 <UART_SetConfig+0x658>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d81c      	bhi.n	8002606 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	200a      	movs	r0, #10
 80025d2:	2418      	movs	r4, #24
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	181b      	adds	r3, r3, r0
 80025d8:	210f      	movs	r1, #15
 80025da:	438a      	bics	r2, r1
 80025dc:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2207      	movs	r2, #7
 80025e6:	4013      	ands	r3, r2
 80025e8:	b299      	uxth	r1, r3
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	181b      	adds	r3, r3, r0
 80025ee:	193a      	adds	r2, r7, r4
 80025f0:	1812      	adds	r2, r2, r0
 80025f2:	8812      	ldrh	r2, [r2, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	193a      	adds	r2, r7, r4
 80025fe:	1812      	adds	r2, r2, r0
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	e095      	b.n	8002732 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002606:	2313      	movs	r3, #19
 8002608:	2218      	movs	r2, #24
 800260a:	4694      	mov	ip, r2
 800260c:	44bc      	add	ip, r7
 800260e:	4463      	add	r3, ip
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e08d      	b.n	8002732 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8002616:	231b      	movs	r3, #27
 8002618:	2218      	movs	r2, #24
 800261a:	4694      	mov	ip, r2
 800261c:	44bc      	add	ip, r7
 800261e:	4463      	add	r3, ip
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b08      	cmp	r3, #8
 8002624:	d86a      	bhi.n	80026fc <UART_SetConfig+0x5f0>
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <UART_SetConfig+0x65c>)
 800262a:	18d3      	adds	r3, r2, r3
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002630:	f7ff fb78 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 8002634:	0002      	movs	r2, r0
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	18d2      	adds	r2, r2, r3
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0019      	movs	r1, r3
 8002644:	0010      	movs	r0, r2
 8002646:	f7fd fd5f 	bl	8000108 <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	b29b      	uxth	r3, r3
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002650:	e05c      	b.n	800270c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002652:	f7ff fb7d 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002656:	0002      	movs	r2, r0
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	18d2      	adds	r2, r2, r3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0019      	movs	r1, r3
 8002666:	0010      	movs	r0, r2
 8002668:	f7fd fd4e 	bl	8000108 <__udivsi3>
 800266c:	0003      	movs	r3, r0
 800266e:	b29b      	uxth	r3, r3
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002672:	e04b      	b.n	800270c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002674:	4b38      	ldr	r3, [pc, #224]	; (8002758 <UART_SetConfig+0x64c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2210      	movs	r2, #16
 800267a:	4013      	ands	r3, r2
 800267c:	d00e      	beq.n	800269c <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	4a39      	ldr	r2, [pc, #228]	; (800276c <UART_SetConfig+0x660>)
 8002686:	189a      	adds	r2, r3, r2
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0019      	movs	r1, r3
 800268e:	0010      	movs	r0, r2
 8002690:	f7fd fd3a 	bl	8000108 <__udivsi3>
 8002694:	0003      	movs	r3, r0
 8002696:	b29b      	uxth	r3, r3
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800269a:	e037      	b.n	800270c <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <UART_SetConfig+0x664>)
 80026a4:	189a      	adds	r2, r3, r2
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0019      	movs	r1, r3
 80026ac:	0010      	movs	r0, r2
 80026ae:	f7fd fd2b 	bl	8000108 <__udivsi3>
 80026b2:	0003      	movs	r3, r0
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026b8:	e028      	b.n	800270c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026ba:	f7ff faa5 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 80026be:	0002      	movs	r2, r0
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	18d2      	adds	r2, r2, r3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0019      	movs	r1, r3
 80026ce:	0010      	movs	r0, r2
 80026d0:	f7fd fd1a 	bl	8000108 <__udivsi3>
 80026d4:	0003      	movs	r3, r0
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026da:	e017      	b.n	800270c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	0212      	lsls	r2, r2, #8
 80026e6:	189a      	adds	r2, r3, r2
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0019      	movs	r1, r3
 80026ee:	0010      	movs	r0, r2
 80026f0:	f7fd fd0a 	bl	8000108 <__udivsi3>
 80026f4:	0003      	movs	r3, r0
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026fa:	e007      	b.n	800270c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80026fc:	2313      	movs	r3, #19
 80026fe:	2218      	movs	r2, #24
 8002700:	4694      	mov	ip, r2
 8002702:	44bc      	add	ip, r7
 8002704:	4463      	add	r3, ip
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
        break;
 800270a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	2b0f      	cmp	r3, #15
 8002710:	d908      	bls.n	8002724 <UART_SetConfig+0x618>
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <UART_SetConfig+0x658>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d804      	bhi.n	8002724 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	e006      	b.n	8002732 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002724:	2313      	movs	r3, #19
 8002726:	2218      	movs	r2, #24
 8002728:	4694      	mov	ip, r2
 800272a:	44bc      	add	ip, r7
 800272c:	4463      	add	r3, ip
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	2200      	movs	r2, #0
 8002736:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2200      	movs	r2, #0
 800273c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800273e:	2313      	movs	r3, #19
 8002740:	2218      	movs	r2, #24
 8002742:	4694      	mov	ip, r2
 8002744:	44bc      	add	ip, r7
 8002746:	4463      	add	r3, ip
 8002748:	781b      	ldrb	r3, [r3, #0]
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b00e      	add	sp, #56	; 0x38
 8002750:	bdb0      	pop	{r4, r5, r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	08002d00 	.word	0x08002d00
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	01e84800 	.word	0x01e84800
 8002764:	0000ffff 	.word	0x0000ffff
 8002768:	08002d24 	.word	0x08002d24
 800276c:	003d0900 	.word	0x003d0900
 8002770:	00f42400 	.word	0x00f42400

08002774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2201      	movs	r2, #1
 8002782:	4013      	ands	r3, r2
 8002784:	d00b      	beq.n	800279e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <UART_AdvFeatureConfig+0x144>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2202      	movs	r2, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a43      	ldr	r2, [pc, #268]	; (80028bc <UART_AdvFeatureConfig+0x148>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	2204      	movs	r2, #4
 80027c6:	4013      	ands	r3, r2
 80027c8:	d00b      	beq.n	80027e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <UART_AdvFeatureConfig+0x14c>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2208      	movs	r2, #8
 80027e8:	4013      	ands	r3, r2
 80027ea:	d00b      	beq.n	8002804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a34      	ldr	r2, [pc, #208]	; (80028c4 <UART_AdvFeatureConfig+0x150>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2210      	movs	r2, #16
 800280a:	4013      	ands	r3, r2
 800280c:	d00b      	beq.n	8002826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <UART_AdvFeatureConfig+0x154>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2220      	movs	r2, #32
 800282c:	4013      	ands	r3, r2
 800282e:	d00b      	beq.n	8002848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4a25      	ldr	r2, [pc, #148]	; (80028cc <UART_AdvFeatureConfig+0x158>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2240      	movs	r2, #64	; 0x40
 800284e:	4013      	ands	r3, r2
 8002850:	d01d      	beq.n	800288e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <UART_AdvFeatureConfig+0x15c>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	035b      	lsls	r3, r3, #13
 8002872:	429a      	cmp	r2, r3
 8002874:	d10b      	bne.n	800288e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <UART_AdvFeatureConfig+0x160>)
 800287e:	4013      	ands	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	4013      	ands	r3, r2
 8002896:	d00b      	beq.n	80028b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <UART_AdvFeatureConfig+0x164>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
  }
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	fffdffff 	.word	0xfffdffff
 80028bc:	fffeffff 	.word	0xfffeffff
 80028c0:	fffbffff 	.word	0xfffbffff
 80028c4:	ffff7fff 	.word	0xffff7fff
 80028c8:	ffffefff 	.word	0xffffefff
 80028cc:	ffffdfff 	.word	0xffffdfff
 80028d0:	ffefffff 	.word	0xffefffff
 80028d4:	ff9fffff 	.word	0xff9fffff
 80028d8:	fff7ffff 	.word	0xfff7ffff

080028dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028ea:	f7fe fa39 	bl	8000d60 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2208      	movs	r2, #8
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d10d      	bne.n	800291c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	0399      	lsls	r1, r3, #14
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <UART_CheckIdleState+0x88>)
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	0013      	movs	r3, r2
 800290e:	2200      	movs	r2, #0
 8002910:	f000 f82a 	bl	8002968 <UART_WaitOnFlagUntilTimeout>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d001      	beq.n	800291c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e01f      	b.n	800295c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2204      	movs	r2, #4
 8002924:	4013      	ands	r3, r2
 8002926:	2b04      	cmp	r3, #4
 8002928:	d10d      	bne.n	8002946 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	03d9      	lsls	r1, r3, #15
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <UART_CheckIdleState+0x88>)
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	0013      	movs	r3, r2
 8002938:	2200      	movs	r2, #0
 800293a:	f000 f815 	bl	8002968 <UART_WaitOnFlagUntilTimeout>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d001      	beq.n	8002946 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e00a      	b.n	800295c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2270      	movs	r2, #112	; 0x70
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bd80      	pop	{r7, pc}
 8002964:	01ffffff 	.word	0x01ffffff

08002968 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	1dfb      	adds	r3, r7, #7
 8002976:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002978:	e029      	b.n	80029ce <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	3301      	adds	r3, #1
 800297e:	d026      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002980:	f7fe f9ee 	bl	8000d60 <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	429a      	cmp	r2, r3
 800298e:	d302      	bcc.n	8002996 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11b      	bne.n	80029ce <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4915      	ldr	r1, [pc, #84]	; (80029f8 <UART_WaitOnFlagUntilTimeout+0x90>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	438a      	bics	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2270      	movs	r2, #112	; 0x70
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e00f      	b.n	80029ee <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	425a      	negs	r2, r3
 80029de:	4153      	adcs	r3, r2
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	001a      	movs	r2, r3
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d0c6      	beq.n	800297a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b004      	add	sp, #16
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	fffffe5f 	.word	0xfffffe5f

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2600      	movs	r6, #0
 8002a00:	4d0c      	ldr	r5, [pc, #48]	; (8002a34 <__libc_init_array+0x38>)
 8002a02:	4c0d      	ldr	r4, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	f000 f821 	bl	8002a54 <_init>
 8002a12:	4d0a      	ldr	r5, [pc, #40]	; (8002a3c <__libc_init_array+0x40>)
 8002a14:	4c0a      	ldr	r4, [pc, #40]	; (8002a40 <__libc_init_array+0x44>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	00b3      	lsls	r3, r6, #2
 8002a22:	58eb      	ldr	r3, [r5, r3]
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	00b3      	lsls	r3, r6, #2
 8002a2c:	58eb      	ldr	r3, [r5, r3]
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002d50 	.word	0x08002d50
 8002a38:	08002d50 	.word	0x08002d50
 8002a3c:	08002d50 	.word	0x08002d50
 8002a40:	08002d54 	.word	0x08002d54

08002a44 <memset>:
 8002a44:	0003      	movs	r3, r0
 8002a46:	1812      	adds	r2, r2, r0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <memset+0xa>
 8002a4c:	4770      	bx	lr
 8002a4e:	7019      	strb	r1, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	e7f9      	b.n	8002a48 <memset+0x4>

08002a54 <_init>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr

08002a60 <_fini>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr
